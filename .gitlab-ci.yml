# This file is a template, and might need editing before it works on your project.
image: golang:latest

variables:
  # Please edit to your GitLab project
  REPO_NAME: gitlab.allgameplay.de/Vincent/apiDocs
  GIT_SSL_NO_VERIFY: "true"

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.

stages:
  - test
  - build

before_script:
- export $GOBIN
- mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
- ln -svf $CI_PROJECT_DIR $GOPATH/src/$REPO_NAME
- cd $GOPATH/src/$REPO_NAME
- git clone https://github.com/bukalapak/snowboard.git $GOPATH/src/github.com/bukalapak/snowboard
- make -C $GOPATH/src/github.com/bukalapak/snowboard install
- go get -t -v ./...

test:
  allow_failure: false
  stage: test
  script:
  - go fmt $(go list ./... | grep -v /vendor/)
  - go vet $(go list ./... | grep -v /vendor/)
  - go test -race $(go list ./... | grep -v /vendor/)
  - go test -v ./...

build:
  allow_failure: false
  stage: build
  script:
  - mkdir .build
  - mkdir .build/bin
  - go build -o .build/bin/apiDocsd cmd/apiDocsd/main.go

  artifacts:
    name: "$CI_COMMIT_REF_NAME"
    untracked: false
    paths:
    - .build/bin/apiDocsd
    expire_in: 3 days

